RUST

Fetcher:
* introduce crate fetcher
* extent http/git fetcher to start cargo-fetch mimic (how???)
* introduce crate dependency variable: either default Crate.lock / overridable Crate.toml

OE:
* prepend SRC_URI (recipe overridable) with https://github.com/rust-lang/crates.io-index.git
* magic sequence:
  * trust Cargo.lock -> fetch
  * check index for the crate. If ${PN}-${PV} found: extract dependencies
  * let cargo-native create a Cargo.lock in do_configure and drop a note to user
* run cargo --frozen at compile time

# crates base dir (see crates.io-index/config.json)
https://crates.io/api/v1/crates/

Crate download
  * Download location (serde-1.0.120): https://crates.io/api/v1/crates/serde/1.0.120/download
  * store in <CARGO_HOME>/registry/cache/github.com-1ecc6299db9ec823/serde-1.0.120.crate
  * Unpack as tar.gz -> <CARGO_HOME>/registry/src/github.com-1ecc6299db9ec823/serde-1.0.120
  * Open questions:
    * How is github.com-1ecc6299db9ec823 created
    * What is in /home/superandy/.cargo/registry/index/github.com-1ecc6299db9ec823 (some odd git / cache)

Registry index:
  Index location (serde-*): crates.io-index/se/rd/serde  !!! path for crate name length <= 3
sha256 checksum: file at index location / matching version / "cksum":"<sha256>"

unpack with?

Don't forget:
ignore yanked files in index



Environment variables
CARGO_HOME
CARGO_REGISTRY_DEFAULT
CARGO_TARGET_DIR


Docs:
* reference:
* registry / index: https://github.com/rust-lang/cargo/blob/master/src/cargo/sources/registry/mod.rs

